@page "/EditItemModal"
@inject IModalService Modal

<form>
    <div class="form-group">
        <label>Name</label>
        <input type="text" class="form-control" @bind="@Name">
    </div>
    <div class="form-group">
        <label>Task description details</label>
        <input type="text" class="form-control" @bind="@Description">
    </div>
    <div class="form-group">
        <label>Due Date</label>
        <input type="text" class="form-control" @bind="@DueDate">
    </div>

</form>

<button type="button" class="btn btn-primary" @onclick="Save">Save changes</button>
<button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>


@code {
    [CascadingParameter] ModalParameters parameters { get; set; }
    string Id { get; set; }

    string Name { get; set; }

    string DueDate { get; set; }

    string Description { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Id = parameters.Get<string>("Id");
        Name = parameters.Get<string>("Name");
        Description = parameters.Get<string>("Description");
        DueDate = parameters.Get<string>("DueDate");
    }

    void Confirm()
    {
        Modal.Close(ModalResult.Ok<string>(""));
    }

    void Cancel()
    {
        Modal.Cancel();
    }

    void Save()
    {
        var itemToSave = new ToDoApp.Data.Models.ToDoItem();
        itemToSave.Name = Name;
        itemToSave.Description = Description;
        itemToSave.DueDate = DateTime.Parse(DueDate);

        //DataAccess

        //save chanes
        //close modal

    }

}
